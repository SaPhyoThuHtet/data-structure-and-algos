#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'queensAttack' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER k
#  3. INTEGER r_q
#  4. INTEGER c_q
#  5. 2D_INTEGER_ARRAY obstacles
#

def queensAttack(n, k, r_q, c_q, obstacles):
    # Write your code here
    # rows ကနေ ကြည့်ရင် column ဘယ်လောက်ရှိလဲဆိုတာ ကြည့်မှာ
    # ဥပမာ Eg ပုံရဲ့ queen ရှိနေတဲ့ row မှာသာ အရေအတွက် ဘယ်နှခု ရှိလဲဆိုတာသည် columns ရဲ့ အရေအတွက်သာဖြစ်တယ် ပြီးတော့ queen တစ်ခုစာကို နှုတ်ပေးရမယ် (Vicese Versa for columns)
    # Matrix  ကတူတော့ columns အရေအတွက်ကော rows အရေအတွက်ပါတူတူပဲဖြစ်တယ်။ အဲ့တော့ အများကြီးစဉ်းစားစရာမလိုဘူး
    nums_of_elements_in_rows = n-1
    nums_of_elements_in_columns = n-1
    
    # Main Diagonal ကော Other Diagonal ရှိနိုင်တဲ့ အရေအတွက်တွေကို အပေါ်ပိုင်းနဲ့ အောက်ပိုင်းခွဲခွဲတွက်မယ်။
    nums_of_elements_upper_main = min(n-r_q,c_q-1)# ခုConcept က ဥပမာ rows နှစ်ခုသွားလို့ရပေမယ့် columns အရေအတွက် က တစ်ခုပဲရှိရင် elements က တစ်ခုပဲရှိနေမှာ, columns နှစ်ခုသွားလို့ရပေမယ့် rows အရေအတွက် က တစ်ခုပဲရှိရင် elements က တစ်ခုပဲရှိနေမှာ
    nums_of_elements_lower_main = min(r_q-1,n-c_q)
    main_diagonal = nums_of_elements_upper_main+nums_of_elements_lower_main
    
    nums_of_elements_upper_other = min(n-r_q, n-c_q)
    nums_of_elements_lower_other = min(r_q-1, c_q-1)
    other_diagonal = nums_of_elements_upper_other+nums_of_elements_lower_other
    
    for i in obstacles:
        if(i[0] == r_q): #this element is in the row of queen
            if (i[1]<c_q):
                nums_of_elements_in_rows -= (i[1])
            else:
                nums_of_elements_in_rows -= (n-i[1]+1)
                
        elif(i[1] == c_q): #this element is in the column of queen
            if(i[0]>r_q):
                nums_of_elements_in_columns -= (n-i[0]+1)
            else:
                nums_of_elements_in_columns -= i[0]
                
        elif(i[0] == i[1]): # this is in other diagonal
            if(i[0]>r_q):
                other_diagonal -= (i[0]-r_q)
            else:
                other_diagonal -= i[0]
        
        else: # this is in main diagonal
            if(i[0]>r_q):
                main_diagonal -= (i[0]-r_q)
            else:
                main_diagonal -= i[0]
                
        return nums_of_elements_in_rows+nums_of_elements_in_columns+main_diagonal+other_diagonal
                
                
            
                
                
    
    
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    k = int(first_multiple_input[1])

    second_multiple_input = input().rstrip().split()

    r_q = int(second_multiple_input[0])

    c_q = int(second_multiple_input[1])

    obstacles = []

    for _ in range(k):
        obstacles.append(list(map(int, input().rstrip().split())))

    result = queensAttack(n, k, r_q, c_q, obstacles)

    fptr.write(str(result) + '\n')

    fptr.close()
